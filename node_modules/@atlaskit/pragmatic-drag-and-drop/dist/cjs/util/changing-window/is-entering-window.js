"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEnteringWindow = isEnteringWindow;
var _isSafari = require("../is-safari");
var _countEventsForSafari = require("./count-events-for-safari");
// We cannot do `target instanceof Node` as the `target` might
// be from a different `window`.
// We are doing some "duck typing" here to have a good signal as
function isNodeLike(target) {
  return 'nodeName' in target;
}
function isEnteringWindow(_ref) {
  var dragEnter = _ref.dragEnter;
  var type = dragEnter.type,
    relatedTarget = dragEnter.relatedTarget;
  if (type !== 'dragenter') {
    return false;
  }
  if ((0, _isSafari.isSafari)()) {
    return (0, _countEventsForSafari.isEnteringWindowInSafari)({
      dragEnter: dragEnter
    });
  }

  // standard check
  if (relatedTarget == null) {
    return true;
  }

  /**
   * 😤 Special cases (`iframe`)
   *
   *
   * 🌏 Chrome (`121.0`)
   *
   * Case: parent `window` → child `iframe`
   * `relatedTarget` is `null` *(standard check)*
   *
   * Case: child `iframe` → parent `window`
   * `relatedTarget` is the `iframe` element in the parent `window`
   *
   * 🦊 Firefox (122.0)
   *
   * Case: parent `window` → child `iframe`
   *  `relatedTarget` is in the child `iframe` is the `iframe` element
   *  from the parent `window` (when parent is on the same domain)
   *
   * Case: child `iframe` → parent `window`
   * `relatedTarget` is the `iframe` element in the parent `window`
   */

  /**
   * Using `instanceof` check as the element will be in the same `window`
   * Cases: Chrome + Firefox child `iframe` → parent `window`.
   */
  if (relatedTarget instanceof HTMLIFrameElement) {
    return true;
  }
  return isNodeLike(relatedTarget) && !document.contains(relatedTarget);
}